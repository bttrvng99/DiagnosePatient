/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import DAO.PatientDAO;
import Model.Patient;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Trung
 */
public class PatientFrm extends javax.swing.JFrame {
    private ArrayList<Patient> patient_list;
    private DefaultTableModel tbl;
    

    /**
     * Creates new form PatientFrm
     */
    public PatientFrm() {
        initComponents();
        this.setLocationRelativeTo(null);
        DefaultTable();
    }
    
    private void DefaultTable(){
        PatientDAO pd = new PatientDAO();
        patient_list = pd.getAllPatient();
        
        Object[] columns = {"ID", "Tên", "Giới tính", "Ngày sinh", "Số điện thoại", "Địa chỉ"};
        Object[][] value = new String[patient_list.size()][6];
        for(int i=0; i<patient_list.size(); i++){
            value[i][0] = patient_list.get(i).getId()+"";
            value[i][1] = patient_list.get(i).getName();
            switch(patient_list.get(i).getSex()){
                case 0:
                    value[i][2] = "Nữ";
                    break;
                case 1:
                    value[i][2] = "Nam";
                    break;
            }
            value[i][3] = patient_list.get(i).getBirth_date().toString();
            value[i][4] = patient_list.get(i).getPhone_num();
            value[i][5] = patient_list.get(i).getAddress();
            tbl = new DefaultTableModel(value, columns){
			    @Override
			    public boolean isCellEditable(int row, int column) {
			       //unable to edit cells
			       return false;
			    }
			};
            jTable1.setModel(tbl);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        SearchNameField = new javax.swing.JTextField();
        SearchName = new javax.swing.JButton();
        ChoosePatient = new javax.swing.JButton();
        ClearList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "Birth date", "Phone number", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Tìm bệnh nhân");

        SearchName.setText("Tìm");
        SearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchNameActionPerformed(evt);
            }
        });

        ChoosePatient.setText("Tiếp");
        ChoosePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChoosePatientActionPerformed(evt);
            }
        });

        ClearList.setText("Xóa");
        ClearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(SearchNameField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearList))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ChoosePatient)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SearchNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchName)
                    .addComponent(ClearList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChoosePatient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchNameActionPerformed
        // TODO add your handling code here:
        if((SearchNameField.getText()==null)||(SearchNameField.getText().length() ==0 )) return;
        PatientDAO pd = new PatientDAO();
        patient_list = pd.searchPatient(SearchNameField.getText().trim());
        
        Object[] columns = {"ID", "Tên", "Giới tính", "Ngày sinh", "Số điện thoại", "Địa chỉ"};
        Object[][] value = new String[patient_list.size()][6];
        for(int i=0; i<patient_list.size(); i++){
            value[i][0] = patient_list.get(i).getId()+"";
            value[i][1] = patient_list.get(i).getName();
            switch(patient_list.get(i).getSex()){
                case 0:
                    value[i][2] = "Nữ";
                    break;
                case 1:
                    value[i][2] = "Nam";
                    break;
            }
            value[i][3] = patient_list.get(i).getBirth_date().toString();
            value[i][4] = patient_list.get(i).getPhone_num();
            value[i][5] = patient_list.get(i).getAddress();
            tbl = new DefaultTableModel(value, columns){
			    @Override
			    public boolean isCellEditable(int row, int column) {
			       //unable to edit cells
			       return false;
			    }
			};;
            jTable1.setModel(tbl);
        }
    }//GEN-LAST:event_SearchNameActionPerformed

    private void ChoosePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChoosePatientActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if(row != -1){
            PatientDAO pd = new PatientDAO();
            int patient_id = Integer.parseInt((String) jTable1.getModel().getValueAt(row, 0));
            DiagnoseFrm df = new DiagnoseFrm();
            df.initDiagnosis(patient_id);
            df.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Hãy chọn một bệnh nhân!");
            return;
        }
    }//GEN-LAST:event_ChoosePatientActionPerformed

    private void ClearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearListActionPerformed
        // TODO add your handling code here:
        DefaultTable();
        SearchNameField.setText("");
    }//GEN-LAST:event_ClearListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChoosePatient;
    private javax.swing.JButton ClearList;
    private javax.swing.JButton SearchName;
    private javax.swing.JTextField SearchNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
